{"ast":null,"code":"import { makeAutoObservable, observable, action } from \"mobx\";\nimport { bfs } from \"../algorithms/bfs\";\nexport class AnimationStore {\n  constructor(height, width) {\n    this.height = 0;\n    this.isRunning = false;\n    this.width = 0;\n    makeAutoObservable(this, {\n      height: observable,\n      isRunning: observable,\n      width: observable,\n      toggleAnimation: action,\n      getShortestPath: action,\n      animate: action,\n      animateShortestPath: action,\n      clearResults: action\n    });\n    this.height = height;\n    this.width = width;\n  }\n\n  toggleAnimation() {\n    this.isRunning = !this.isRunning;\n  }\n\n  getShortestPath(grid, algo) {\n    if (!this.isRunning) {\n      this.clearResults(grid);\n      this.toggleAnimation();\n      const startNode = grid.findNode(grid.startNode.y, grid.startNode.x);\n      const endNode = grid.findNode(grid.endNode.y, grid.endNode.x);\n      let visitedNodesInOrder;\n\n      switch (algo) {\n        case 'Breadth First Search':\n          visitedNodesInOrder = bfs(grid, this.height, this.width);\n          break;\n\n        default:\n          // should never go here\n          break;\n      }\n\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(endNode);\n      nodesInShortestPathOrder.push('end');\n      this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\n    }\n  }\n\n  animate(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        const nodeClassName = document.getElementById('node-' + node.col + '-' + node.row).className;\n\n        if (nodeClassName !== 'node-start' && nodeClassName !== 'node-end') {\n          document.getElementById('node-' + node.col + '-' + node.row).className = 'node-visited';\n        }\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      if (nodesInShortestPathOrder[i] === 'end') {\n        setTimeout(() => {\n          this.toggleAnimation();\n        }, i * 50);\n      } else {\n        setTimeout(() => {\n          const node = nodesInShortestPathOrder[i];\n          const nodeClassName = document.getElementById('node-' + node.col + '-' + node.row).className;\n\n          if (nodeClassName !== 'node-start' && nodeClassName !== 'node-end') {\n            document.getElementById('node-' + node.col + '-' + node.row).className = 'node-shortest-path';\n          }\n        }, i * 40);\n      }\n    }\n  }\n\n  clearResults(grid) {\n    /*grid.squares.map(row => {\r\n        row.map(col => {\r\n            const node = grid.squares[col.col][col.row];\r\n            node.isVisted = false;\r\n            node.previousNode = null;\r\n            const nodeClassName = document.getElementById('node-'+col.col+'-'+col.row).className;\r\n            if (nodeClassName === 'node-visited' || nodeClassName === 'node-shortest-path') {\r\n                document.getElementById('node-'+col.col+'-'+col.row).className = 'node';\r\n            }\r\n        })\r\n    })*/\n  }\n\n}\n\nfunction getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  return nodesInShortestPathOrder;\n}","map":{"version":3,"names":["makeAutoObservable","observable","action","bfs","AnimationStore","constructor","height","width","isRunning","toggleAnimation","getShortestPath","animate","animateShortestPath","clearResults","grid","algo","startNode","findNode","y","x","endNode","visitedNodesInOrder","nodesInShortestPathOrder","getNodesInShortestPathOrder","push","i","length","setTimeout","node","nodeClassName","document","getElementById","col","row","className","finishNode","currentNode","unshift","previousNode"],"sources":["C:/Users/jaewh/OneDrive/Desktop/Resume/pathfinder/src/stores/animationStore.jsx"],"sourcesContent":["import { makeAutoObservable, observable, action } from \"mobx\"\r\nimport { bfs } from \"../algorithms/bfs\";\r\n\r\nexport class AnimationStore {\r\n    height = 0;\r\n    isRunning = false;\r\n    width = 0;\r\n\r\n    constructor(height, width) {\r\n        makeAutoObservable(this, {\r\n            height: observable,\r\n            isRunning: observable,\r\n            width: observable,\r\n            toggleAnimation: action,\r\n            getShortestPath: action,\r\n            animate: action,\r\n            animateShortestPath: action,\r\n            clearResults: action\r\n        });\r\n        this.height = height;\r\n        this.width = width;\r\n    }\r\n\r\n    toggleAnimation() {\r\n        this.isRunning = !this.isRunning;\r\n    }\r\n\r\n    getShortestPath(grid, algo) {\r\n        if (!this.isRunning) {\r\n            this.clearResults(grid);\r\n            this.toggleAnimation();\r\n            const startNode = grid.findNode(grid.startNode.y, grid.startNode.x);\r\n            const endNode = grid.findNode(grid.endNode.y, grid.endNode.x);\r\n            let visitedNodesInOrder;\r\n            switch (algo) {\r\n                case 'Breadth First Search':\r\n                    visitedNodesInOrder = bfs(grid, this.height, this.width);\r\n                    break;\r\n                default:\r\n                    // should never go here\r\n                    break;\r\n            }\r\n            const nodesInShortestPathOrder = getNodesInShortestPathOrder(endNode);\r\n            nodesInShortestPathOrder.push('end');\r\n            this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\r\n        }\r\n    }\r\n\r\n    animate(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n            if (i === visitedNodesInOrder.length) {\r\n                setTimeout(() => {\r\n                    this.animateShortestPath(nodesInShortestPathOrder);\r\n                }, 10 * i);\r\n                return;\r\n            }\r\n            setTimeout(() => {\r\n                const node = visitedNodesInOrder[i];\r\n                const nodeClassName = document.getElementById('node-'+node.col+'-'+node.row).className;\r\n                if (nodeClassName !== 'node-start' && nodeClassName !== 'node-end') {\r\n                    document.getElementById('node-'+node.col+'-'+node.row).className = 'node-visited';\r\n                }\r\n            }, 10 * i);\r\n        }\r\n    }\r\n\r\n    animateShortestPath(nodesInShortestPathOrder) {\r\n        for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n            if (nodesInShortestPathOrder[i] === 'end') {\r\n                setTimeout(() => {\r\n                    this.toggleAnimation();\r\n                }, i * 50);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const node = nodesInShortestPathOrder[i];\r\n                    const nodeClassName = document.getElementById('node-'+node.col+'-'+node.row).className;\r\n                    if (nodeClassName !== 'node-start' && nodeClassName !== 'node-end') {\r\n                        document.getElementById('node-'+node.col+'-'+node.row).className = 'node-shortest-path';\r\n                    }\r\n                }, i * 40);\r\n            }\r\n        }\r\n    }\r\n\r\n    clearResults(grid) {\r\n        /*grid.squares.map(row => {\r\n            row.map(col => {\r\n                const node = grid.squares[col.col][col.row];\r\n                node.isVisted = false;\r\n                node.previousNode = null;\r\n                const nodeClassName = document.getElementById('node-'+col.col+'-'+col.row).className;\r\n                if (nodeClassName === 'node-visited' || nodeClassName === 'node-shortest-path') {\r\n                    document.getElementById('node-'+col.col+'-'+col.row).className = 'node';\r\n                }\r\n            })\r\n        })*/\r\n    }\r\n\r\n}\r\n\r\nfunction getNodesInShortestPathOrder(finishNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        nodesInShortestPathOrder.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}