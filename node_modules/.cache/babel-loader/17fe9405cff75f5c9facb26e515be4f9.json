{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jaewh\\\\OneDrive\\\\Desktop\\\\Resume\\\\pathfinder\\\\src\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { makeAutoObservable } from \"mobx\";\nimport { observer, useLocalObservable } from \"mobx-react-lite\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TimerView = _s(observer(_c = _s(() => {\n  _s();\n\n  const timer = useLocalObservable(() => ({\n    secondsPassed: 0,\n\n    increaseTimer() {\n      this.secondsPassed++;\n    }\n\n  }));\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    children: [\"Seconds passed: \", timer.secondsPassed]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 12\n  }, this);\n}, \"JVxo+hfsF305inkPL2c8UxIMSKA=\", false, function () {\n  return [useLocalObservable];\n})), \"JVxo+hfsF305inkPL2c8UxIMSKA=\", false, function () {\n  return [useLocalObservable];\n});\n\n_c2 = TimerView;\nReactDOM.render( /*#__PURE__*/_jsxDEV(TimerView, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 18,\n  columnNumber: 17\n}, this), document.body);\nuseEffect(() => {\n  const handle = setInterval(() => {\n    timer.increaseTimer();\n  }, 1000);\n  return () => {\n    clearInterval(handle);\n  };\n}, [timer]);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TimerView$observer\");\n$RefreshReg$(_c2, \"TimerView\");","map":{"version":3,"names":["React","ReactDOM","makeAutoObservable","observer","useLocalObservable","useState","TimerView","timer","secondsPassed","increaseTimer","render","document","body","useEffect","handle","setInterval","clearInterval"],"sources":["C:/Users/jaewh/OneDrive/Desktop/Resume/pathfinder/src/index.js"],"sourcesContent":["import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport { makeAutoObservable } from \"mobx\"\r\n\r\nimport { observer, useLocalObservable } from \"mobx-react-lite\"\r\nimport { useState } from \"react\"\r\n\r\nconst TimerView = observer(() => {\r\n    const timer = useLocalObservable(() => ({\r\n        secondsPassed: 0,\r\n        increaseTimer() {\r\n            this.secondsPassed++\r\n        }\r\n    }))\r\n    return <span>Seconds passed: {timer.secondsPassed}</span>\r\n})\r\n\r\nReactDOM.render(<TimerView />, document.body)\r\nuseEffect(() => {\r\n    const handle = setInterval(() => {\r\n        timer.increaseTimer()\r\n    }, 1000)\r\n    return () => {\r\n        clearInterval(handle)\r\n    }\r\n}, [timer])"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,kBAAT,QAAmC,MAAnC;AAEA,SAASC,QAAT,EAAmBC,kBAAnB,QAA6C,iBAA7C;AACA,SAASC,QAAT,QAAyB,OAAzB;;;AAEA,MAAMC,SAAS,MAAGH,QAAQ,SAAC,MAAM;EAAA;;EAC7B,MAAMI,KAAK,GAAGH,kBAAkB,CAAC,OAAO;IACpCI,aAAa,EAAE,CADqB;;IAEpCC,aAAa,GAAG;MACZ,KAAKD,aAAL;IACH;;EAJmC,CAAP,CAAD,CAAhC;EAMA,oBAAO;IAAA,+BAAuBD,KAAK,CAACC,aAA7B;EAAA;IAAA;IAAA;IAAA;EAAA,QAAP;AACH,CARyB;EAAA,QACRJ,kBADQ;AAAA,GAAX;EAAA,QACGA,kBADH;AAAA,EAAf;;MAAME,S;AAUNL,QAAQ,CAACS,MAAT,eAAgB,QAAC,SAAD;EAAA;EAAA;EAAA;AAAA,QAAhB,EAA+BC,QAAQ,CAACC,IAAxC;AACAC,SAAS,CAAC,MAAM;EACZ,MAAMC,MAAM,GAAGC,WAAW,CAAC,MAAM;IAC7BR,KAAK,CAACE,aAAN;EACH,CAFyB,EAEvB,IAFuB,CAA1B;EAGA,OAAO,MAAM;IACTO,aAAa,CAACF,MAAD,CAAb;EACH,CAFD;AAGH,CAPQ,EAON,CAACP,KAAD,CAPM,CAAT"},"metadata":{},"sourceType":"module"}