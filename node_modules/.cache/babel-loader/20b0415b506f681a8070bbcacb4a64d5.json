{"ast":null,"code":"import { makeAutoObservable } from 'mobx';\nimport { SquareStore } from './squareStore';\n/*class TodoList {\r\n    todos = []\r\n    get unfinishedTodoCount() {\r\n        return this.todos.filter(todo => !todo.finished).length\r\n    }\r\n    constructor(todos) {\r\n        makeObservable(this, {\r\n            todos: observable,\r\n            unfinishedTodoCount: computed\r\n        })\r\n        this.todos = todos\r\n    }\r\n}*/\n\nexport class Grid {\n  constructor() {\n    let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 20;\n    this.squares = [];\n    makeAutoObservable(this);\n\n    for (let i = 0; i < size; i++) {\n      this.squares = [];\n\n      for (let j = 0; j < size; j++) {\n        this.squares[i].push(new SquareStore());\n      }\n    }\n  }\n\n  testGrid() {\n    let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 20;\n    let grid = [];\n    let n = 0;\n\n    for (let i = 0; i < size; i++) {\n      grid.push([]);\n\n      for (let j = 0; j < size; j++) {\n        grid[i].push(new SquareStore(n));\n        n = n + 1;\n      }\n    }\n\n    this.squares = grid;\n  }\n\n  get getGrid() {\n    return this.squares;\n  }\n\n  getSquare(x, y) {\n    return this.squares[x][y];\n  }\n\n}","map":{"version":3,"names":["makeAutoObservable","SquareStore","Grid","constructor","size","squares","i","j","push","testGrid","grid","n","getGrid","getSquare","x","y"],"sources":["C:/Users/jaewh/OneDrive/Desktop/Resume/pathfinder/src/stores/grid.jsx"],"sourcesContent":["import { makeAutoObservable } from 'mobx';\r\nimport { SquareStore } from './squareStore'\r\n\r\n/*class TodoList {\r\n    todos = []\r\n    get unfinishedTodoCount() {\r\n        return this.todos.filter(todo => !todo.finished).length\r\n    }\r\n    constructor(todos) {\r\n        makeObservable(this, {\r\n            todos: observable,\r\n            unfinishedTodoCount: computed\r\n        })\r\n        this.todos = todos\r\n    }\r\n}*/\r\n\r\nexport class Grid {\r\n    squares = [];\r\n\r\n    constructor(size = 20) {\r\n        makeAutoObservable(this);\r\n        for (let i = 0; i < size; i++) {\r\n            this.squares = [];\r\n            for (let j = 0; j < size; j++) {\r\n                this.squares[i].push(new SquareStore());\r\n            }\r\n        }\r\n    }\r\n\r\n    testGrid(size = 20) {\r\n        let grid = []\r\n        let n = 0\r\n        for (let i = 0; i < size; i++) {\r\n            grid.push([])\r\n            for (let j = 0; j < size; j++) {\r\n                grid[i].push(new SquareStore(n));\r\n                n = n + 1;\r\n            }\r\n        }\r\n        this.squares = grid\r\n    }\r\n\r\n    get getGrid() {\r\n        return this.squares;\r\n    }\r\n\r\n    getSquare(x, y) {\r\n        return this.squares[x][y];\r\n    }\r\n}"],"mappings":"AAAA,SAASA,kBAAT,QAAmC,MAAnC;AACA,SAASC,WAAT,QAA4B,eAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,IAAN,CAAW;EAGdC,WAAW,GAAY;IAAA,IAAXC,IAAW,uEAAJ,EAAI;IAAA,KAFvBC,OAEuB,GAFb,EAEa;IACnBL,kBAAkB,CAAC,IAAD,CAAlB;;IACA,KAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAApB,EAA0BE,CAAC,EAA3B,EAA+B;MAC3B,KAAKD,OAAL,GAAe,EAAf;;MACA,KAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAApB,EAA0BG,CAAC,EAA3B,EAA+B;QAC3B,KAAKF,OAAL,CAAaC,CAAb,EAAgBE,IAAhB,CAAqB,IAAIP,WAAJ,EAArB;MACH;IACJ;EACJ;;EAEDQ,QAAQ,GAAY;IAAA,IAAXL,IAAW,uEAAJ,EAAI;IAChB,IAAIM,IAAI,GAAG,EAAX;IACA,IAAIC,CAAC,GAAG,CAAR;;IACA,KAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAApB,EAA0BE,CAAC,EAA3B,EAA+B;MAC3BI,IAAI,CAACF,IAAL,CAAU,EAAV;;MACA,KAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAApB,EAA0BG,CAAC,EAA3B,EAA+B;QAC3BG,IAAI,CAACJ,CAAD,CAAJ,CAAQE,IAAR,CAAa,IAAIP,WAAJ,CAAgBU,CAAhB,CAAb;QACAA,CAAC,GAAGA,CAAC,GAAG,CAAR;MACH;IACJ;;IACD,KAAKN,OAAL,GAAeK,IAAf;EACH;;EAEU,IAAPE,OAAO,GAAG;IACV,OAAO,KAAKP,OAAZ;EACH;;EAEDQ,SAAS,CAACC,CAAD,EAAIC,CAAJ,EAAO;IACZ,OAAO,KAAKV,OAAL,CAAaS,CAAb,EAAgBC,CAAhB,CAAP;EACH;;AAhCa"},"metadata":{},"sourceType":"module"}