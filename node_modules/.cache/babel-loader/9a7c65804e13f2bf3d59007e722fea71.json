{"ast":null,"code":"import { makeAutoObservable } from 'mobx';\nimport { Square } from './square';\n/*class TodoList {\r\n    todos = []\r\n    get unfinishedTodoCount() {\r\n        return this.todos.filter(todo => !todo.finished).length\r\n    }\r\n    constructor(todos) {\r\n        makeObservable(this, {\r\n            todos: observable,\r\n            unfinishedTodoCount: computed\r\n        })\r\n        this.todos = todos\r\n    }\r\n}*/\n\nexport class Grid {\n  testGrid() {\n    let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 5;\n    let grid = [];\n    let n = 0;\n\n    for (let i = 0; i < size; i++) {\n      this.squares.push([]);\n\n      for (let j = 0; j < size; j++) {\n        let newSquare = new Square(n);\n        this.squares[i][j].push(newSquare.type);\n        n = n + 1;\n      }\n    }\n  }\n\n  constructor() {\n    this.squares = [];\n    makeAutoObservable(this); //this.initializeGrid();\n  }\n\n  get getGrid() {\n    return this.squares;\n  }\n\n  getSquare(x, y) {\n    return this.squares[x][y];\n  }\n\n}","map":{"version":3,"names":["makeAutoObservable","Square","Grid","testGrid","size","grid","n","i","squares","push","j","newSquare","type","constructor","getGrid","getSquare","x","y"],"sources":["C:/Users/jaewh/OneDrive/Desktop/Resume/pathfinder/src/models/grid.jsx"],"sourcesContent":["import { makeAutoObservable } from 'mobx';\r\nimport { Square } from './square'\r\n\r\n/*class TodoList {\r\n    todos = []\r\n    get unfinishedTodoCount() {\r\n        return this.todos.filter(todo => !todo.finished).length\r\n    }\r\n    constructor(todos) {\r\n        makeObservable(this, {\r\n            todos: observable,\r\n            unfinishedTodoCount: computed\r\n        })\r\n        this.todos = todos\r\n    }\r\n}*/\r\n\r\nexport class Grid {\r\n    squares = [];\r\n\r\n    testGrid(size = 5) {\r\n        let grid = []\r\n        let n = 0\r\n        for (let i = 0; i < size; i++) {\r\n            this.squares.push([])\r\n            for (let j = 0; j < size; j++) {\r\n                let newSquare = new Square(n);\r\n                this.squares[i][j].push(newSquare.type);\r\n                n = n + 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n        //this.initializeGrid();\r\n    }\r\n\r\n    get getGrid() {\r\n        return this.squares;\r\n    }\r\n\r\n    getSquare(x, y) {\r\n        return this.squares[x][y];\r\n    }\r\n}"],"mappings":"AAAA,SAASA,kBAAT,QAAmC,MAAnC;AACA,SAASC,MAAT,QAAuB,UAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,IAAN,CAAW;EAGdC,QAAQ,GAAW;IAAA,IAAVC,IAAU,uEAAH,CAAG;IACf,IAAIC,IAAI,GAAG,EAAX;IACA,IAAIC,CAAC,GAAG,CAAR;;IACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAApB,EAA0BG,CAAC,EAA3B,EAA+B;MAC3B,KAAKC,OAAL,CAAaC,IAAb,CAAkB,EAAlB;;MACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,IAApB,EAA0BM,CAAC,EAA3B,EAA+B;QAC3B,IAAIC,SAAS,GAAG,IAAIV,MAAJ,CAAWK,CAAX,CAAhB;QACA,KAAKE,OAAL,CAAaD,CAAb,EAAgBG,CAAhB,EAAmBD,IAAnB,CAAwBE,SAAS,CAACC,IAAlC;QACAN,CAAC,GAAGA,CAAC,GAAG,CAAR;MACH;IACJ;EACJ;;EAEDO,WAAW,GAAG;IAAA,KAfdL,OAec,GAfJ,EAeI;IACVR,kBAAkB,CAAC,IAAD,CAAlB,CADU,CAEV;EACH;;EAEU,IAAPc,OAAO,GAAG;IACV,OAAO,KAAKN,OAAZ;EACH;;EAEDO,SAAS,CAACC,CAAD,EAAIC,CAAJ,EAAO;IACZ,OAAO,KAAKT,OAAL,CAAaQ,CAAb,EAAgBC,CAAhB,CAAP;EACH;;AA3Ba"},"metadata":{},"sourceType":"module"}