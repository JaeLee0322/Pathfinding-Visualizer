{"ast":null,"code":"import { makeAutoObservable } from 'mobx';\nimport { Square } from './square';\n/*class TodoList {\r\n    todos = []\r\n    get unfinishedTodoCount() {\r\n        return this.todos.filter(todo => !todo.finished).length\r\n    }\r\n    constructor(todos) {\r\n        makeObservable(this, {\r\n            todos: observable,\r\n            unfinishedTodoCount: computed\r\n        })\r\n        this.todos = todos\r\n    }\r\n}*/\n\nexport class Grid {\n  testGrid() {\n    let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 6;\n    let grid = [];\n    let n = 0;\n\n    for (let i = 0; i < size; i++) {\n      grid.push([]);\n\n      for (let j = 0; j < size; j++) {\n        grid[i].push(new Square(n));\n        n = n + 1;\n      }\n    }\n\n    this.squares = grid;\n  }\n\n  constructor() {\n    this.squares = [...Array(5)].map(e => Array(5).fill(0));\n    makeAutoObservable(this);\n  }\n\n  get getGrid() {\n    return this.squares;\n  }\n\n  getSquare(x, y) {\n    return this.squares[x][y];\n  }\n\n}","map":{"version":3,"names":["makeAutoObservable","Square","Grid","testGrid","size","grid","n","i","push","j","squares","constructor","Array","map","e","fill","getGrid","getSquare","x","y"],"sources":["C:/Users/jaewh/OneDrive/Desktop/Resume/pathfinder/src/models/grid.jsx"],"sourcesContent":["import { makeAutoObservable } from 'mobx';\r\nimport { Square } from './square'\r\n\r\n/*class TodoList {\r\n    todos = []\r\n    get unfinishedTodoCount() {\r\n        return this.todos.filter(todo => !todo.finished).length\r\n    }\r\n    constructor(todos) {\r\n        makeObservable(this, {\r\n            todos: observable,\r\n            unfinishedTodoCount: computed\r\n        })\r\n        this.todos = todos\r\n    }\r\n}*/\r\n\r\nexport class Grid {\r\n    squares = [...Array(5)].map(e => Array(5).fill(0));\r\n\r\n    testGrid(size = 6) {\r\n        let grid = []\r\n        let n = 0\r\n        for (let i = 0; i < size; i++) {\r\n            grid.push([])\r\n            for (let j = 0; j < size; j++) {\r\n                grid[i].push(new Square(n));\r\n                n = n + 1;\r\n            }\r\n        }\r\n        this.squares = grid\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    get getGrid() {\r\n        return this.squares;\r\n    }\r\n\r\n    getSquare(x, y) {\r\n        return this.squares[x][y];\r\n    }\r\n}"],"mappings":"AAAA,SAASA,kBAAT,QAAmC,MAAnC;AACA,SAASC,MAAT,QAAuB,UAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,IAAN,CAAW;EAGdC,QAAQ,GAAW;IAAA,IAAVC,IAAU,uEAAH,CAAG;IACf,IAAIC,IAAI,GAAG,EAAX;IACA,IAAIC,CAAC,GAAG,CAAR;;IACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAApB,EAA0BG,CAAC,EAA3B,EAA+B;MAC3BF,IAAI,CAACG,IAAL,CAAU,EAAV;;MACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,IAApB,EAA0BK,CAAC,EAA3B,EAA+B;QAC3BJ,IAAI,CAACE,CAAD,CAAJ,CAAQC,IAAR,CAAa,IAAIP,MAAJ,CAAWK,CAAX,CAAb;QACAA,CAAC,GAAGA,CAAC,GAAG,CAAR;MACH;IACJ;;IACD,KAAKI,OAAL,GAAeL,IAAf;EACH;;EAEDM,WAAW,GAAG;IAAA,KAfdD,OAec,GAfJ,CAAC,GAAGE,KAAK,CAAC,CAAD,CAAT,EAAcC,GAAd,CAAkBC,CAAC,IAAIF,KAAK,CAAC,CAAD,CAAL,CAASG,IAAT,CAAc,CAAd,CAAvB,CAeI;IACVf,kBAAkB,CAAC,IAAD,CAAlB;EACH;;EAEU,IAAPgB,OAAO,GAAG;IACV,OAAO,KAAKN,OAAZ;EACH;;EAEDO,SAAS,CAACC,CAAD,EAAIC,CAAJ,EAAO;IACZ,OAAO,KAAKT,OAAL,CAAaQ,CAAb,EAAgBC,CAAhB,CAAP;EACH;;AA1Ba"},"metadata":{},"sourceType":"module"}