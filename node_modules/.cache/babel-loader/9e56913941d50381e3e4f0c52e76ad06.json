{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jaewh\\\\OneDrive\\\\Desktop\\\\Resume\\\\pathfinder\\\\src\\\\components\\\\squareView.jsx\";\nimport { observer } from \"mobx-react-lite\";\nimport '../models/square';\n/*\r\nimport * as React from \"react\"\r\nimport { render } from \"react-dom\"\r\nimport { observer } from \"mobx-react-lite\"\r\nimport { makeObservable, observable, computed, action } from \"mobx\"\r\n\r\nclass Todo {\r\n    id = Math.random()\r\n    title = \"\"\r\n    finished = false\r\n\r\n    constructor(title) {\r\n        makeObservable(this, {\r\n            title: observable,\r\n            finished: observable,\r\n            toggle: action\r\n        })\r\n        this.title = title\r\n    }\r\n\r\n    toggle() {\r\n        this.finished = !this.finished\r\n    }\r\n} \r\n\r\nclass TodoList {\r\n    todos = []\r\n    get unfinishedTodoCount() {\r\n        return this.todos.filter(todo => !todo.finished).length\r\n    }\r\n    constructor(todos) {\r\n        makeObservable(this, {\r\n            todos: observable,\r\n            unfinishedTodoCount: computed\r\n        })\r\n        this.todos = todos\r\n    }\r\n}\r\n\r\nconst TodoListView = observer(({ todoList }) => (\r\n    <div>\r\n        <ul>\r\n            {todoList.todos.map(todo => (\r\n                <TodoView todo={todo} key={todo.id} />\r\n            ))}\r\n        </ul>\r\n        Tasks left: {todoList.unfinishedTodoCount}\r\n    </div>\r\n))\r\n\r\nconst TodoView = observer(({ todo }) => (\r\n    <li>\r\n        <input type=\"checkbox\" checked={todo.finished} onClick={() => todo.toggle()} />\r\n        {todo.title}\r\n    </li>\r\n))\r\n\r\nconst store = new TodoList([new Todo(\"Get Coffee\"), new Todo(\"Write simpler code\")])\r\nrender(<TodoListView todoList={store} />, document.getElementById(\"root\"))\r\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SquareView = observer(_c = _ref => {\n  let {\n    square\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      children: square.type\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n});\n_c2 = SquareView;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SquareView$observer\");\n$RefreshReg$(_c2, \"SquareView\");","map":{"version":3,"names":["observer","SquareView","square","type"],"sources":["C:/Users/jaewh/OneDrive/Desktop/Resume/pathfinder/src/components/squareView.jsx"],"sourcesContent":["import { observer } from \"mobx-react-lite\";\r\nimport '../models/square'\r\n\r\n/*\r\nimport * as React from \"react\"\r\nimport { render } from \"react-dom\"\r\nimport { observer } from \"mobx-react-lite\"\r\nimport { makeObservable, observable, computed, action } from \"mobx\"\r\n\r\nclass Todo {\r\n    id = Math.random()\r\n    title = \"\"\r\n    finished = false\r\n\r\n    constructor(title) {\r\n        makeObservable(this, {\r\n            title: observable,\r\n            finished: observable,\r\n            toggle: action\r\n        })\r\n        this.title = title\r\n    }\r\n\r\n    toggle() {\r\n        this.finished = !this.finished\r\n    }\r\n} \r\n\r\nclass TodoList {\r\n    todos = []\r\n    get unfinishedTodoCount() {\r\n        return this.todos.filter(todo => !todo.finished).length\r\n    }\r\n    constructor(todos) {\r\n        makeObservable(this, {\r\n            todos: observable,\r\n            unfinishedTodoCount: computed\r\n        })\r\n        this.todos = todos\r\n    }\r\n}\r\n\r\nconst TodoListView = observer(({ todoList }) => (\r\n    <div>\r\n        <ul>\r\n            {todoList.todos.map(todo => (\r\n                <TodoView todo={todo} key={todo.id} />\r\n            ))}\r\n        </ul>\r\n        Tasks left: {todoList.unfinishedTodoCount}\r\n    </div>\r\n))\r\n\r\nconst TodoView = observer(({ todo }) => (\r\n    <li>\r\n        <input type=\"checkbox\" checked={todo.finished} onClick={() => todo.toggle()} />\r\n        {todo.title}\r\n    </li>\r\n))\r\n\r\nconst store = new TodoList([new Todo(\"Get Coffee\"), new Todo(\"Write simpler code\")])\r\nrender(<TodoListView todoList={store} />, document.getElementById(\"root\"))\r\n*/\r\n\r\nexport const SquareView = observer(({ square }) => (\r\n    <div>\r\n        <button>{square.type}</button>\r\n    </div>\r\n))"],"mappings":";AAAA,SAASA,QAAT,QAAyB,iBAAzB;AACA,OAAO,kBAAP;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,OAAO,MAAMC,UAAU,GAAGD,QAAQ,MAAC;EAAA,IAAC;IAAEE;EAAF,CAAD;EAAA,oBAC/B;IAAA,uBACI;MAAA,UAASA,MAAM,CAACC;IAAhB;MAAA;MAAA;MAAA;IAAA;EADJ;IAAA;IAAA;IAAA;EAAA,QAD+B;AAAA,CAAD,CAA3B;MAAMF,U"},"metadata":{},"sourceType":"module"}