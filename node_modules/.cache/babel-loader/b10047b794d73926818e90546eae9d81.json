{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jaewh\\\\OneDrive\\\\Desktop\\\\Resume\\\\pathfinder\\\\src\\\\index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { makeAutoObservable } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Timer {\n  constructor() {\n    this.secondsPassed = 0;\n    makeAutoObservable(this);\n  }\n\n  increaseTimer() {\n    this.secondsPassed += 1;\n  }\n\n}\n\nconst myTimer = new Timer(); // A function component wrapped with `observer` will react\n// to any future change in an observable it used before.\n\nconst TimerView = observer(_c = _ref => {\n  let {\n    timer\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    children: [\"Seconds passed: \", timer.secondsPassed]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 43\n  }, this);\n});\n_c2 = TimerView;\nReactDOM.render( /*#__PURE__*/_jsxDEV(TimerView, {\n  timer: myTimer\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 24,\n  columnNumber: 17\n}, this), document.body);\nsetInterval(() => {\n  myTimer.increaseTimer();\n}, 1000);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TimerView$observer\");\n$RefreshReg$(_c2, \"TimerView\");","map":{"version":3,"names":["React","ReactDOM","makeAutoObservable","observer","Timer","constructor","secondsPassed","increaseTimer","myTimer","TimerView","timer","render","document","body","setInterval"],"sources":["C:/Users/jaewh/OneDrive/Desktop/Resume/pathfinder/src/index.js"],"sourcesContent":["import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport { makeAutoObservable } from \"mobx\"\r\nimport { observer } from \"mobx-react-lite\"\r\n\r\nclass Timer {\r\n    secondsPassed = 0\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    increaseTimer() {\r\n        this.secondsPassed += 1\r\n    }\r\n}\r\n\r\nconst myTimer = new Timer()\r\n\r\n// A function component wrapped with `observer` will react\r\n// to any future change in an observable it used before.\r\nconst TimerView = observer(({ timer }) => <span>Seconds passed: {timer.secondsPassed}</span>)\r\n\r\nReactDOM.render(<TimerView timer={myTimer} />, document.body)\r\n\r\nsetInterval(() => {\r\n    myTimer.increaseTimer()\r\n}, 1000)"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,kBAAT,QAAmC,MAAnC;AACA,SAASC,QAAT,QAAyB,iBAAzB;;;AAEA,MAAMC,KAAN,CAAY;EAGRC,WAAW,GAAG;IAAA,KAFdC,aAEc,GAFE,CAEF;IACVJ,kBAAkB,CAAC,IAAD,CAAlB;EACH;;EAEDK,aAAa,GAAG;IACZ,KAAKD,aAAL,IAAsB,CAAtB;EACH;;AATO;;AAYZ,MAAME,OAAO,GAAG,IAAIJ,KAAJ,EAAhB,C,CAEA;AACA;;AACA,MAAMK,SAAS,GAAGN,QAAQ,MAAC;EAAA,IAAC;IAAEO;EAAF,CAAD;EAAA,oBAAe;IAAA,+BAAuBA,KAAK,CAACJ,aAA7B;EAAA;IAAA;IAAA;IAAA;EAAA,QAAf;AAAA,CAAD,CAA1B;MAAMG,S;AAENR,QAAQ,CAACU,MAAT,eAAgB,QAAC,SAAD;EAAW,KAAK,EAAEH;AAAlB;EAAA;EAAA;EAAA;AAAA,QAAhB,EAA+CI,QAAQ,CAACC,IAAxD;AAEAC,WAAW,CAAC,MAAM;EACdN,OAAO,CAACD,aAAR;AACH,CAFU,EAER,IAFQ,CAAX"},"metadata":{},"sourceType":"module"}