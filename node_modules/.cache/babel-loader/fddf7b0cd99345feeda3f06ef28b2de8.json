{"ast":null,"code":"import { action, computed, makeAutoObservable, observable } from 'mobx';\nimport { Node } from '../components/node';\nexport class GridStore {\n  // 0: empty, 1: wall, 2: start, 3: end\n  constructor(width, height) {\n    this.squares = [];\n    this.drawingMode = 0;\n    this.startNode = {\n      x: 10,\n      y: 10\n    };\n    this.endNode = {\n      x: 80,\n      y: 35\n    };\n    makeAutoObservable(this, {\n      squares: observable,\n      drawingMode: observable,\n      startNode: observable.struct,\n      endNode: observable.struct,\n      initiateGrid: action,\n      initiateEndPoints: action,\n      changeGrid: action,\n      clearGrid: action,\n      setDrawingMode: action\n    });\n    this.setDrawingMode(1);\n    this.initiateGrid(width, height);\n  }\n\n  initiateGrid(width, height) {\n    const grid = [];\n\n    for (let i = 0; i < height; i++) {\n      grid.push([]);\n\n      for (let j = 0; j < width; j++) {\n        if (i == this.startNode.y && j == this.startNode.x) grid[i].push(new Node(j, i, 2));else if (i == this.endNode.y && j == this.endNode.x) grid[i].push(new Node(j, i, 3));else grid[i].push(new Node(j, i));\n      }\n    }\n\n    this.squares = grid;\n  }\n\n  changeGrid(node, mode) {\n    switch (mode) {\n      case 0:\n        if (node.nodeType !== 2 && node.nodeType !== 3) node.changeType(0);\n        break;\n\n      case 1:\n        if (node.nodeType !== 2 && node.nodeType !== 3) node.changeType(1);\n        break;\n\n      case 2:\n        node.changeType(2);\n        break;\n\n      case 3:\n        node.changeType(3);\n        break;\n    }\n  }\n\n  clearGrid() {\n    for (let row = 0; row < this.squares.length; row++) {\n      for (let col = 0; col < this.squares[row].length; col++) {\n        if (this.squares[row][col].nodeType !== 2 && this.squares[row][col].nodeType !== 3) this.squares[row][col].resetType();\n      }\n    }\n  }\n\n  setDrawingMode(mode) {\n    this.drawingMode = mode;\n  }\n\n}\nexport default GridStore;","map":{"version":3,"names":["action","computed","makeAutoObservable","observable","Node","GridStore","constructor","width","height","squares","drawingMode","startNode","x","y","endNode","struct","initiateGrid","initiateEndPoints","changeGrid","clearGrid","setDrawingMode","grid","i","push","j","node","mode","nodeType","changeType","row","length","col","resetType"],"sources":["C:/Users/jaewh/OneDrive/Desktop/Resume/pathfinder/src/stores/gridStore.jsx"],"sourcesContent":["import { action, computed, makeAutoObservable, observable } from 'mobx';\r\nimport { Node } from '../components/node';\r\n\r\nexport class GridStore {\r\n    squares = [];\r\n    drawingMode = 0;  // 0: empty, 1: wall, 2: start, 3: end\r\n    startNode = {\r\n        x: 10,\r\n        y: 10\r\n    }\r\n    endNode = {\r\n        x: 80,\r\n        y: 35\r\n    }\r\n\r\n    constructor(width, height) {\r\n        makeAutoObservable(this, {\r\n            squares: observable,\r\n            drawingMode: observable,\r\n            startNode: observable.struct,\r\n            endNode: observable.struct,\r\n            initiateGrid: action,\r\n            initiateEndPoints: action,\r\n            changeGrid: action,\r\n            clearGrid: action,\r\n            setDrawingMode: action\r\n        });\r\n        this.setDrawingMode(1);\r\n        this.initiateGrid(width, height);\r\n    }\r\n\r\n    initiateGrid(width, height) {\r\n        const grid = []\r\n        for (let i = 0; i < height; i++) {\r\n            grid.push([])\r\n            for (let j = 0; j < width; j++) {\r\n                if (i == this.startNode.y && j == this.startNode.x) grid[i].push(new Node(j, i, 2));\r\n                else if (i == this.endNode.y && j == this.endNode.x) grid[i].push(new Node(j, i, 3));\r\n                else grid[i].push(new Node(j, i));\r\n            }\r\n        }\r\n        this.squares = grid;\r\n    }\r\n\r\n    changeGrid(node, mode) {\r\n        switch (mode) {\r\n            case 0:\r\n                if (node.nodeType !== 2 && node.nodeType !== 3) node.changeType(0);\r\n                break;\r\n            case 1:\r\n                if (node.nodeType !== 2 && node.nodeType !== 3) node.changeType(1);\r\n                break;\r\n            case 2:\r\n                node.changeType(2);\r\n                break;\r\n            case 3:\r\n                node.changeType(3);\r\n                break;\r\n        }\r\n    }\r\n\r\n    clearGrid() {\r\n        for (let row = 0; row < this.squares.length; row++) {\r\n            for (let col = 0; col < this.squares[row].length; col++) {\r\n                if (this.squares[row][col].nodeType !== 2 && this.squares[row][col].nodeType !== 3) this.squares[row][col].resetType();\r\n            }\r\n        }\r\n    }\r\n\r\n    setDrawingMode(mode) {\r\n        this.drawingMode = mode;\r\n    }\r\n}\r\n\r\nexport default GridStore"],"mappings":"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"},"metadata":{},"sourceType":"module"}